//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     ANTLR Version: 4.13.1
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// Generated from c://Development//Lapsang//src//cat-or-dog//cat_or_dog.g4 by ANTLR 4.13.1

// Unreachable code detected
#pragma warning disable 0162
// The variable '...' is assigned but its value is never used
#pragma warning disable 0219
// Missing XML comment for publicly visible type or member '...'
#pragma warning disable 1591
// Ambiguous reference in cref attribute
#pragma warning disable 419

using System;
using System.IO;
using System.Text;
using System.Diagnostics;
using System.Collections.Generic;
using Antlr4.Runtime;
using Antlr4.Runtime.Atn;
using Antlr4.Runtime.Misc;
using Antlr4.Runtime.Tree;
using DFA = Antlr4.Runtime.Dfa.DFA;

[System.CodeDom.Compiler.GeneratedCode("ANTLR", "4.13.1")]
[System.CLSCompliant(false)]
public partial class cat_or_dogParser : Parser {
	protected static DFA[] decisionToDFA;
	protected static PredictionContextCache sharedContextCache = new PredictionContextCache();
	public const int
		CAT=1, DOG=2;
	public const int
		RULE_solver = 0;
	public static readonly string[] ruleNames = {
		"solver"
	};

	private static readonly string[] _LiteralNames = {
		null, "'cat'", "'dog'"
	};
	private static readonly string[] _SymbolicNames = {
		null, "CAT", "DOG"
	};
	public static readonly IVocabulary DefaultVocabulary = new Vocabulary(_LiteralNames, _SymbolicNames);

	[NotNull]
	public override IVocabulary Vocabulary
	{
		get
		{
			return DefaultVocabulary;
		}
	}

	public override string GrammarFileName { get { return "cat_or_dog.g4"; } }

	public override string[] RuleNames { get { return ruleNames; } }

	public override int[] SerializedAtn { get { return _serializedATN; } }

	static cat_or_dogParser() {
		decisionToDFA = new DFA[_ATN.NumberOfDecisions];
		for (int i = 0; i < _ATN.NumberOfDecisions; i++) {
			decisionToDFA[i] = new DFA(_ATN.GetDecisionState(i), i);
		}
	}

		public cat_or_dogParser(ITokenStream input) : this(input, Console.Out, Console.Error) { }

		public cat_or_dogParser(ITokenStream input, TextWriter output, TextWriter errorOutput)
		: base(input, output, errorOutput)
	{
		Interpreter = new ParserATNSimulator(this, _ATN, decisionToDFA, sharedContextCache);
	}

	public partial class SolverContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CAT() { return GetToken(cat_or_dogParser.CAT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DOG() { return GetToken(cat_or_dogParser.DOG, 0); }
		public SolverContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_solver; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			Icat_or_dogListener typedListener = listener as Icat_or_dogListener;
			if (typedListener != null) typedListener.EnterSolver(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			Icat_or_dogListener typedListener = listener as Icat_or_dogListener;
			if (typedListener != null) typedListener.ExitSolver(this);
		}
	}

	[RuleVersion(0)]
	public SolverContext solver() {
		SolverContext _localctx = new SolverContext(Context, State);
		EnterRule(_localctx, 0, RULE_solver);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 2;
			_la = TokenStream.LA(1);
			if ( !(_la==CAT || _la==DOG) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	private static int[] _serializedATN = {
		4,1,2,5,2,0,7,0,1,0,1,0,1,0,0,0,1,0,0,1,1,0,1,2,3,0,2,1,0,0,0,2,3,7,0,
		0,0,3,1,1,0,0,0,0
	};

	public static readonly ATN _ATN =
		new ATNDeserializer().Deserialize(_serializedATN);


}
